$aclfile = APP_PATH . '/security/acl.cache';
        if (true !== is_File($aclfile)) {

            $acl = new Memory();
            $acl->addRole('Admin');
            $acl->addRole('Customer');
            $acl->addRole('Guest');
            $acl->addComponent(
                'order',
                [
                    'add',
                    'addhelper',
                    'index'
                ]
            );

            $acl->allow('Admin', 'order', 'add');

            //  $acl->deny('Guest', 'order', '*');
            $acl->allow('Guest', 'order', 'add');
            $acl->allow('Admin');

            file_put_contents(
                $aclfile,
                serialize($acl)
            );
        } else {
            $acl = unserialize(
                file_get_contents($aclfile)
            );
        }






 $aclfile = APP_PATH . '/security/acl.cathe';
        if(is_file($aclfile)){
            // echo "read";
           $acl = unserialize(
               file_get_contents($aclfile)
           );
        } else {
            $acl = new Memory();
            $acl->addRole('admin');
            $acl->addComponent(
                "secure",
                [
                    'build'
                ]
            );
            $acl->allow("admin","*","*");
        }
        $role = $application->request->getQuery('role')??'admin';
        //    echo $role;
        //    die;
        $cont=$this->router->getControllerName();
        $act=$this->router->getActionName();
        // echo "$act , $cont,$role";
        // die;
           if($acl->isAllowed("$role","$cont","$act")){
           }else{
            echo 'Access denied';
            // print_r($acl);
               die;
           }       

    }








<?php

namespace App\Listeners;

use Phalcon\Di\Injectable;
use Phalcon\Events\Event;
use Phalcon\Security\JWT\Token\Parser;

class NotificationListeners extends Injectable
{
    public function afterSend(Event $event, \App\Components\DateHelper $components)
    {
        $logger = $this->di->get('logger');
        $logger->info('After notification');
    }

    public function beforeSend(Event $event, $addarr, $settings)
    {
        $logger = $this->di->get('logger');

        if (isset($addarr->customer_name)) {
            $logger->info('Before notification. Order Added');
        }
        if (isset($addarr->product_name)) {
            $logger->info('Before notification. Product Added');
        }

        if ($addarr->price == '') {
            $addarr->price = $settings[0]->default_price;
        }
        if ($addarr->stocks == '') {
            $addarr->stocks = $settings[0]->default_stock;
        }
        if ($settings[0]->title_optimization == 'Y') {
            $addarr->product_name = "$addarr->product_name" . "$addarr->tags";
        }
        if (isset($addarr->zipcode) && $addarr->zipcode == '') {
            $addarr->zipcode = $settings[0]->default_zipcode;
        }
        return $addarr;
    }

    public function beforeHandleRequest(Event $event, \Phalcon\Mvc\Application $application)
    {
        $aclFile = APP_PATH . '/security/acl.cache';
        if (true === is_file($aclFile)) {
            $acl = unserialize(file_get_contents($aclFile));
            $bearer = $application->request->get('bearer')??'invalidToken';
            $controller = $application->router->getControllerName() ?? 'index';
            $action = $application->router->getActionName() ?? 'index';
            try {
                $parser = new Parser();
                $role = $parser->parse($bearer)->getClaims()->getPayload()['sub'];
                // die;

            } catch (\Exception $e) {
                echo "Try with accessable token please !";
                die;
            }
            if (!$role || true !== $acl->isAllowed($role, $controller, $action)) {

                echo '<h2>Access denied :(</h2>';
                die;
            }
        }
    }
}